# These two properties are passed in from kairosdb via system properties.
# Changes for these two should be made in kairosdb.conf
metric-prefix: "kairosdb."
kairos-host: "localhost"

metrics4j: {
	#_dump-file: "dump.conf"
	plugins: {
		jmx: {
			_class: "org.kairosdb.metrics4j.plugins.JMXReporter"
			type-map: {
				java.lang.Object: "long"
			}
			class-name-attributes: ["type", "name"]
		}
	}


	sources: {
		# Default collectors
		_collector: [ "counter", "strings" ]
		_sink: "internal"
		_trigger: "defaultTrigger"
		_tags: {
			host: ${kairos-host}
			#Add additional tags for metrics here
		}
		_disabled: true

		org.kairosdb: {
			# enabled just kairos metrics and a few java jmx metrics
			_disabled: false
		}

		java: {
			lang.Memory: {
				HeapMemoryUsage: {
					_disabled: false
					_formatter: "genericFormatter"
					_metric-name: "jvm.heap_usage"
				}
				NonHeapMemoryUsage: {
					_disabled: false
					_formatter: "genericFormatter"
					_metric-name: "jvm.non_heap_usage"
				}
			}

			lang.Threading.ThreadCount: {
				_disabled: false
				_formatter: "genericFormatter"
				_metric-name: "jvm.thread_count"
			}
		}


		org.kairosdb.filter.FilterStats.skippedMetrics: {
			_formatter: "genericFormatter"
			_metric-name: "filter.skipped_metrics"
		}


		org.kairosdb.core.reporting.DataPointsMonitor.MetricCounters.countMetric: {
			_formatter: "genericFormatter"
			_metric-name: "metric_counters"
		}

		org.kairosdb.core.reporting.JavaMonitor: {
			_formatter: "jvmFormatter"
		}

		org.kairosdb.plugin.remote.RemoteStats: {
			_formatter: "remoteFormatter"

			timeToSend: {
				_formatter: "remoteFormatterWithField"
				_collector: "timeStats"
			}
		}
	}

	sinks: {
		#Defines what sinks to use - where to send the metrics
		internal: {
			_class: "org.kairosdb.metrics.InternalSink"
		}
	}

	collectors: {
		#Defines what collectors will be used and configures them
		counter: {
			_class: "org.kairosdb.metrics4j.collectors.impl.LongCounter"
			reset: true
			report-zero: false
		}

		stats: {
			_class: "org.kairosdb.metrics4j.collectors.impl.SimpleStats"
			report-zero: false
		}

		strings: {
			_class: "org.kairosdb.metrics4j.collectors.impl.StringReporter"
		}

		bag: {
			_class: "org.kairosdb.metrics4j.collectors.impl.BagCollector"
			#Used for reporting durations
			report-unit: "MILLIS"
		}

		timeStats: {
			_class: "org.kairosdb.metrics4j.collectors.impl.SimpleTimerMetric"
			report-unit: "MILLIS"
		}
	}

	formatters: {
		#Can reformat metric names when reporting

		genericFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.TemplateFormatter"
			template: ${metric-prefix}"%{metricName}"
		}

		remoteFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.TemplateFormatter"
			template: ${metric-prefix}"remote.%{methodName}"
		}

		remoteFormatterWithField: {
			_class: "org.kairosdb.metrics4j.formatters.TemplateFormatter"
			template: ${metric-prefix}"remote.%{methodName}.%{field}"
		}

		queueStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"queue.%{metricName}.%{field}"
		}

		jvmFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"jvm.%{metricName}"
		}

	}

	triggers: {
		#determines when to collect metrics
		defaultTrigger: {
			_class: "org.kairosdb.metrics4j.triggers.IntervalTrigger"
			interval: "1m"
		}
	}
}
